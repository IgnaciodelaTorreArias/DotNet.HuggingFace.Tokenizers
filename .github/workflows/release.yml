name: Release

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            runtime: win-x64
          - target: aarch64-pc-windows-msvc
            runtime: win-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install protoc
        run: |
          $PROTOC_ZIP = "protoc-30.2-win64.zip"
          Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v30.2/$PROTOC_ZIP" -OutFile $PROTOC_ZIP
          Expand-Archive -Path $PROTOC_ZIP -DestinationPath protoc
          Add-Content $env:GITHUB_PATH "$PWD\protoc\bin"
      - name: Build Rust .dll
        run: cargo build --manifest-path .\tokenizers_proto\Cargo.toml --release --target ${{ matrix.target }}
      - name: Upload .dll
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: .\tokenizers_proto\target\${{ matrix.target }}\release\tokenizers_proto.dll

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runtime: linux-x64
            flags: RUSTFLAGS=""
          - target: aarch64-unknown-linux-gnu
            runtime: linux-arm64
            flags: RUSTFLAGS="-C link-arg=--target=aarch64-linux-gnu -C link-arg=--gcc-toolchain=/usr"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: install packages
        run: |
          sudo apt update
          sudo apt install -y clang unzip gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: install protoc
        run: |
          PROTOC_ZIP="protoc-30.2-linux-x86_64.zip"
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v30.2/$PROTOC_ZIP"
          unzip $PROTOC_ZIP -d $HOME/.local
          export PATH="$PATH:$HOME/.local/bin"
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build Rust .so
        run: |
          export CC=clang
          export CXX=clang++
          ${{ matrix.flags }} cargo build --manifest-path tokenizers_proto/Cargo.toml --release --target ${{ matrix.target }}
      - name: Upload .so
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: tokenizers_proto/target/${{ matrix.target }}/release/libtokenizers_proto.so

  build-osx:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            runtime: osx-x64
          - target: aarch64-apple-darwin
            runtime: osx-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Build Rust .dylib
        run: cargo build --manifest-path tokenizers_proto/Cargo.toml --release --target ${{ matrix.target }}
      - name: Upload .dylib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: tokenizers_proto/target/${{ matrix.target }}/release/libtokenizers_proto.dylib

  pack:
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-linux
      - build-osx
    strategy:
      matrix:
        runtime:
          - win-x64
          - linux-x64
          - osx-x64
          - osx-arm64
          - win-arm64
          - linux-arm64
    steps:
      - uses: actions/checkout@v4
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.428'
      - name: Prepare runtimes folder
        run: |
          mkdir -p runtimes/${{ matrix.runtime }}/native
      - name: Download runtimes
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: runtimes/${{ matrix.runtime }}/native
      - name: Run dotnet pack
        run: dotnet pack DotNet.HuggingFace.Tokenizers.csproj -c Release
      - name: Upload .nupkg
        uses: actions/upload-artifact@v4
        with:
          name: DotNet.HuggingFace.Tokenizers
          path: bin/Release/*.nupkg
