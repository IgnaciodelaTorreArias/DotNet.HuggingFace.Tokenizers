name: Release

on:
  workflow_dispatch:
env:
  PROTOC: 30.2

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            runtime: win-x64
          - target: aarch64-pc-windows-msvc
            runtime: win-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
      - name: cache cargo build
        uses: actions/cache@v4
        with:
          path: tokenizers_proto/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: $HOME\.protoc
          key: ${{ runner.os }}-protoc-${{ env.PROTOC }}
      - name: install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          $PROTOC_ZIP = "protoc-${{ env.PROTOC }}-win64.zip"
          Invoke-WebRequest -Uri "https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC }}/$PROTOC_ZIP" -OutFile $PROTOC_ZIP
          Expand-Archive -Path $PROTOC_ZIP -DestinationPath "$HOME\.protoc"
      - name: update path
        run: Add-Content $env:GITHUB_PATH "$HOME\.protoc\bin"
      - name: build rust .dll
        run: cargo build --manifest-path .\tokenizers_proto\Cargo.toml --release --target ${{ matrix.target }}
      - name: upload .dll
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: .\tokenizers_proto\target\${{ matrix.target }}\release\tokenizers_proto.dll

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            runtime: linux-x64
            flags: RUSTFLAGS="-C linker=/usr/bin/clang"
          - target: aarch64-unknown-linux-gnu
            runtime: linux-arm64
            flags: RUSTFLAGS="-C linker=/usr/bin/clang -C link-arg=--target=aarch64-linux-gnu -C link-arg=--gcc-toolchain=/usr"
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
      - name: cache cargo build
        uses: actions/cache@v4
        with:
          path: tokenizers_proto/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-
      - name: install packages
        run: |
          sudo apt update
          sudo apt install -y clang unzip gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: "$HOME/.protoc"
          key: ${{ runner.os }}-protoc-${{ env.PROTOC }}
      - name: install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          PROTOC_ZIP="protoc-${{ env.PROTOC }}-linux-x86_64.zip"
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC }}/$PROTOC_ZIP"
          unzip $PROTOC_ZIP -d $HOME/.protoc
      - name: update path
        run: echo "$HOME/.protoc/bin" >> $GITHUB_PATH
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: build rust .so
        run: ${{ matrix.flags }} cargo build --manifest-path tokenizers_proto/Cargo.toml --release --target ${{ matrix.target }}
      - name: upload .so
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: tokenizers_proto/target/${{ matrix.target }}/release/libtokenizers_proto.so

  build-osx:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            runtime: osx-x64
          - target: aarch64-apple-darwin
            runtime: osx-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
      - name: cache cargo build
        uses: actions/cache@v4
        with:
          path: tokenizers_proto/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-target-
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: cache protoc
        id: cache-protoc
        uses: actions/cache@v4
        with:
          path: "$HOME/.protoc"
          key: ${{ runner.os }}-protoc-${{ env.PROTOC }}
      - name: install protoc
        if: steps.cache-protoc.outputs.cache-hit != 'true'
        run: |
          PROTOC_ZIP="protoc-${{ env.PROTOC }}-osx-aarch_64.zip"
          curl -LO "https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC }}/$PROTOC_ZIP"
          unzip $PROTOC_ZIP -d $HOME/.protoc
      - name: update path
        run: echo "$HOME/.protoc/bin" >> $GITHUB_PATH
      - name: build rust .dylib
        run: cargo build --manifest-path tokenizers_proto/Cargo.toml --release --target ${{ matrix.target }}
      - name: upload .dylib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.runtime }}
          path: tokenizers_proto/target/${{ matrix.target }}/release/libtokenizers_proto.dylib

  pack:
    runs-on: ubuntu-latest
    needs:
      - build-windows
      - build-linux
      - build-osx
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.0.428'
      # Download runtimes
      - uses: actions/download-artifact@v4
        with:
          name: win-x64
          path: runtimes/win-x64/native
      - uses: actions/download-artifact@v4
        with:
          name: linux-x64
          path: runtimes/linux-x64/native
      - uses: actions/download-artifact@v4
        with:
          name: osx-x64
          path: runtimes/osx-x64/native
      - uses: actions/download-artifact@v4
        with:
          name: osx-arm64
          path: runtimes/osx-arm64/native
      - uses: actions/download-artifact@v4
        with:
          name: win-arm64
          path: runtimes/win-arm64/native
      - uses: actions/download-artifact@v4
        with:
          name: linux-arm64
          path: runtimes/linux-arm64/native
      - name: run dotnet pack
        run: dotnet pack DotNet.HuggingFace.Tokenizers.csproj -c Release
      - name: upload .nupkg
        uses: actions/upload-artifact@v4
        with:
          name: DotNet.HuggingFace.Tokenizers
          path: bin/Release/*.nupkg
